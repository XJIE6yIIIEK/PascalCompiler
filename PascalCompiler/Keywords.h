#pragma once
#include <map>
#include <string>

enum class KeywordsType {
	MoreEqual,
	LessEqual,
	More,
	Less,
	Equal,
	NotEqual,
	Define,
	DoubleDot,
	Plus,
	Minus,
	Multiply,
	OpenComment,
	CloseComment,
	Division,
	OpenBracket,
	CloseBracket,
	OpenFigure,
	CloseFigure,
	OpenSquare,
	CloseSquare,
	Quote,
	Dot,
	TwoDots,
	Comma,
	Semicolon,
	If,
	Do,
	Of,
	Or,
	End,
	Var,
	Div,
	And,
	Not,
	Mod,
	Nil,
	Then,
	Else,
	Type,
	Begin,
	While,
	Array,
	Const,
	Program,
};

const std::map<std::string, KeywordsType> keywordsDict = {{
	{">=", KeywordsType::MoreEqual},
	{"<=", KeywordsType::LessEqual},
	{">", KeywordsType::More},
	{"<", KeywordsType::Less},
	{"=", KeywordsType::Equal},
	{"<>", KeywordsType::NotEqual},
	{":=", KeywordsType::Define},
	{":", KeywordsType::DoubleDot},
	{"+", KeywordsType::Plus},
	{"-", KeywordsType::Minus},
	{"(*", KeywordsType::OpenComment},
	{"*)", KeywordsType::CloseComment},
	{"/", KeywordsType::Division},
	{"(", KeywordsType::OpenBracket},
	{")", KeywordsType::CloseBracket},
	{"{", KeywordsType::OpenFigure},
	{"}", KeywordsType::CloseFigure},
	{"[", KeywordsType::OpenSquare},
	{"]", KeywordsType::CloseSquare},
	{"'", KeywordsType::Quote},
	{".", KeywordsType::Dot},
	{"..", KeywordsType::TwoDots},
	{",", KeywordsType::Comma},
	{";", KeywordsType::Semicolon},
	{"if", KeywordsType::If},
	{"do", KeywordsType::Do},
	{"of", KeywordsType::Of},
	{"or", KeywordsType::Or},
	{"end", KeywordsType::End},
	{"var", KeywordsType::Var},
	{"div", KeywordsType::Div},
	{"and", KeywordsType::And},
	{"not", KeywordsType::Not},
	{"mod", KeywordsType::Mod},
	{"nil", KeywordsType::Nil},
	{"then", KeywordsType::Then},
	{"else", KeywordsType::Else},
	{"type", KeywordsType::Type},
	{"begin", KeywordsType::Begin},
	{"while", KeywordsType::While},
	{"array", KeywordsType::Array},
	{"const", KeywordsType::Const},
	{"program", KeywordsType::Program}
}};

const std::map<KeywordsType, std::string> enumToKeywords = { {
	{KeywordsType::MoreEqual, ">="},
	{KeywordsType::LessEqual, "<="},
	{KeywordsType::More, ">"},
	{KeywordsType::Less, "<"},
	{KeywordsType::Equal, "="},
	{KeywordsType::NotEqual, "<>"},
	{KeywordsType::Define, ":="},
	{KeywordsType::DoubleDot, ":"},
	{KeywordsType::Plus, "+"},
	{KeywordsType::Minus, "-"},
	{KeywordsType::OpenComment, "(*"},
	{KeywordsType::CloseComment, "*)"},
	{KeywordsType::Division, "/"},
	{KeywordsType::OpenBracket, "("},
	{KeywordsType::CloseBracket, ")"},
	{KeywordsType::OpenFigure, "{"},
	{KeywordsType::CloseFigure, "}"},
	{KeywordsType::OpenSquare, "["},
	{KeywordsType::CloseSquare, "]"},
	{KeywordsType::Quote, "'"},
	{KeywordsType::Dot, "."},
	{KeywordsType::TwoDots, ".."},
	{KeywordsType::Comma, ","},
	{KeywordsType::Semicolon, ";"},
	{KeywordsType::If, "if"},
	{KeywordsType::Of, "of"},
	{KeywordsType::Or, "or"},
	{KeywordsType::End, "end"},
	{KeywordsType::Var, "var"},
	{KeywordsType::Div, "div"},
	{KeywordsType::And, "and"},
	{KeywordsType::Not, "not"},
	{KeywordsType::Mod, "mod"},
	{KeywordsType::Nil, "nil"},
	{KeywordsType::Then, "then"},
	{KeywordsType::Else, "else"},
	{KeywordsType::Type, "type"},
	{KeywordsType::Begin, "begin"},
	{KeywordsType::While, "while"},
	{KeywordsType::Array, "array"},
	{KeywordsType::Const, "const"},
	{KeywordsType::Program, "program"}
}};